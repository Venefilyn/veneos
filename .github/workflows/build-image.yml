---
name: Build VeneOS image
on:
  workflow_dispatch:
    inputs:
      image_flavor:
        description: "The image to build"
        type: choice
        options:
          - "veneos"
          - "veneos-server"
        default: "veneos"
  workflow_call:
    inputs:
      image_flavor:
        type: string
    secrets:
      SIGNING_SECRET:
        required: true

env:
  IMAGE_NAME: "${{ github.event.repository.name }}" # the name of the image produced by this build, matches repo names
  IMAGE_DESC: "${{ github.event.repository.description }}"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/6598829?s=200&v=4" # You should put your own image here so that you get a fancy profile image on https://artifacthub.io/!
  SET_X: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.image_flavor }}
  cancel-in-progress: true

jobs:
  get-images:
    name: Get Images for Build
    permissions:
      actions: read
    outputs:
      image: ${{ steps.images.outputs.image }}
      variants: ${{ steps.images.outputs.variants }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Get Images for Build
        id: images
        uses: ./.github/actions/get-images
        with:
          image_flavor: ${{ inputs.image_flavor }}

  build_push:
    name: Build ${{ inputs.image_flavor }}:${{ matrix.variant }} image and publish
    needs: get-images
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        variant: ["${{ fromJson(needs.get-images.outputs.variants) }}"]

    steps:
      # These stage versions are pinned by https://github.com/renovatebot/renovate
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      # Needed to add ArtifactHub manifest
      - name: Install ORAS
        id: install_oras
        uses: oras-project/setup-oras@8d34698a59f5ffe24821f0b48ab62a3de8b64b20 # v1.2.3

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like what is defined on the ArtifactHub documentation
          # E.g: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      # Image metadata for https://artifacthub.io/
      - name: Image Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: metadata
        with:
          tags: |
            type=raw,value=latest,enable=${{ matrix.variant == 'stable' }}
            type=raw,value=${{ matrix.variant }}
            type=raw,value=${{ matrix.variant }}.{{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ inputs.image_flavor }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ matrix.variant }}.{{date 'YYYYMMDD'}}
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=bootc,ostree,ublue,universal-blue,veneos${{ inputs.image_flavor == 'veneos-server' && ',coreos,ucore' || ',bazzite' }}
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            io.artifacthub.package.maintainers=[{"name":"Freya Gustavsson","email":"freya@venefilyn.se"}]
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Setup Just
        # yamllint disable-line rule:line-length rule:comments
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Lowercase Image
        id: image_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ inputs.image_flavor }}

      # Verify the container image and if it fails, we just don't push this at all
      # Something is up and we need to manually check
      - name: Verify upstream container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        shell: bash
        run: |
          cosign verify \
            --key ./build_files/ublue.pub \
            "${{ needs.get-images.outputs.image }}"

      - name: Build Image
        id: build_image
        env:
          PR_NUMBER: ${{ github.event.number || '0' }}
        run: |
          just=$(which just)

          sudo $just build "${{ steps.image_case.outputs.lowercase }}" "${{ matrix.variant }}" stable

      - name: Generate tags
        id: tags
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        env:
          PR_NUMBER: ${{ github.event.number || '0' }}
        run: |
          just=$(which just)

          tags=$(sudo $just generate-build-tags "${{ matrix.variant }}" "${{ env.PR_NUMBER }}")
          echo "tags=$tags" >> $GITHUB_OUTPUT
      # Tag Images
      - name: Tag Images
        run: |
          just=$(which just)
          sudo $just tag-images "${{ steps.image_case.outputs.lowercase }}" \
                          "${{ matrix.variant }}" \
                          "${{ steps.tags.outputs.tags }}"

      - name: Login to GitHub Container Registry (ORAS)
        id: oras_ghcr_login
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | oras login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Publish Artifact Hub Manifest
        id: publish_ah_manifest
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          oras push \
            ghcr.io/${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}:artifacthub.io \
            --config /dev/null:application/vnd.cncf.artifacthub.config.v1+yaml \
            artifacthub-repo.yml:application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml

      - name: Push To GHCR
        id: push
        if: >-
          contains(fromJson('["workflow_dispatch", "merge_group"]'),
          github.event_name)
        env:
          ACTOR: ${{ github.actor }}
          TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -eou pipefail
          just=$(which just)

          sudo $just login-to-ghcr ${{ env.ACTOR }} ${{ env.TOKEN }}

          digest=$(sudo $just push-to-registry "${{ steps.image_case.outputs.lowercase }}" "${{ matrix.variant }}" "${{ steps.tags.outputs.tags }}" "${{ env.IMAGE_REGISTRY }}")

          echo "digest=$digest" >> $GITHUB_OUTPUT

      # Signing container image so anyone and ourselves can easily verify its authenticity
      # for future updates.
      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          IMAGE_FULL="${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL@${{ env.DIGEST }}
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
